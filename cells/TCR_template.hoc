 /* TCR/TCR_template.hoc
 automatically written from f2nrn/neuron_code_writer.f
 via subroutines that were inserted into the fortran
 code e.g., TCR/integrate_TCR.hoc
 
 The template's form was derived by
 Tom Morse and Michael Hines
 from a template, pyr3_template created
 by Roger Traub and Maciej Lazarewicz when they ported
 
         Traub RD, Buhl EH, Gloveli T, Whittington MA.
 Fast Rhythmic Bursting Can Be Induced in Layer 2/3
 Cortical Neurons by Enhancing Persistent Na(+)
 Conductance or by Blocking BK Channels.J Neurophysiol.
 2003 Feb;89(2):909-21.
 
 to NEURON
 
 */
 
 begintemplate TCR
	public type
    	public name
    	strdef name
 
 // parts of the template were lifted from a default
 // cell writing from Network Builder NetGUI[0]
 
         public is_art
         public init, topol, basic_shape, subsets
         public geom, biophys 
         public synlist, x, y, z, position
         public connect2target
         public set_netcon_src_comp
         // the above function added to set neton
         // compartment source in the presyn cell
 
         public comp, level, Soma, Dendrites
         public Soma_Dendrites, Axon, all
         public presyn_comp, top_level
         // it is the responsibility of the calling
         // program to set the above presynapf_tcrtic
         // compartment number
 
         external traub_connect
         objref this
  create  comp[ 137+1]
         objref level[ 4+1], Soma, Dendrites
         objref Soma_Dendrites, Axon
         objref synlist
func type() {return       12 }

         proc init() {
           doubler = 1
  comp[0] delete_section() // clean up for fortran code
            traub_connect( 137+1)
 
            titlePrint()
 
            presyn_comp = 135
            // in Traub model;changed by calling prog.
            objref Soma, Axon, Dendrites, Soma_Dendrites
            objref level
 
            topol()
            shape1()
			shape2()
 
            geom()        // the geometry and
            subsets()        // subsets and
            biophys()  // active currents
            synlist = new List() // list of synapses
 // NetGUI[0] stores synapses in the cell object, in 
 // Traub model it is easier to store them outside
            set_doubler() // to double or not
            if (doubler) {double_dend_cond()}
                          /* for taking
  spine membrane area correction into account (the 
  method used doubles max cond's when spines present)
 */
             more_adjustments()
	name = "TCR"
         }
         proc double_dend_cond() {
         /* this function gets replaced later with 
 another one if double_dend_cond() is tacked on. */
         }
 
         proc titlePrint() {
 
 /*              print "
                 print "-----"
                 print "
             print "TCR Neuron Model based on "
             print "Traub RD et al (2005, 2003)"
                 print "
                 print "-----"
 Remove title printing with this comment for now.  
 Printing otherwise repeats (for each cell)
 -too voluminous for a network creation */
         }
 
         proc set_doubler() {doubler=1}
         // this function gets replaced with one that
         // sets doubler to 0 when there are no spines
         // in the cell (for no spines the additional
         // hoc code is written from integrate_cell.f
         // where cell is nRT, TCR.  Woops I just
         // found that deepaxax, deepbask, deepLTS,
         // supaxax, supbask, supLTS all use the script
         // cell/run_fortran.sh to replace the =1's with
         // =0's.  I will change the fortran code to
         // make it all run_fortran.sh replacements or
         // not for uniformity.
         proc topol() {
 // create comp[ 138] // note one greater than numcomp due to fortran indicies
  // last argument, parent location for connection
  // is overwritten to 1 for parents with connected children 
  // in below traub_connect proc calls
 traub_connect(this,  1,  132,   0.0796751205, 0)
 traub_connect(this,  1,  2,   0.0946071642, 1)
 traub_connect(this,  1,  15,   0.0946071642, 1)
 traub_connect(this,  1,  28,   0.0946071642, 1)
 traub_connect(this,  1,  41,   0.0946071642, 1)
 traub_connect(this,  1,  54,   0.0946071642, 1)
 traub_connect(this,  1,  67,   0.0946071642, 1)
 traub_connect(this,  1,  80,   0.0946071642, 1)
 traub_connect(this,  1,  93,   0.0946071642, 1)
 traub_connect(this,  1,  106,   0.0946071642, 1)
 traub_connect(this,  1,  119,   0.0946071642, 1)
 traub_connect(this,  2,  3,   0.0174185429,  1.)
 traub_connect(this,  2,  4,   0.0174185429,  1.)
 traub_connect(this,  2,  5,   0.0174185429,  1.)
 traub_connect(this,  3,  6,   0.00766658232, 1)
 traub_connect(this,  3,  7,   0.00766658232, 1)
 traub_connect(this,  3,  8,   0.00766658232, 1)
 traub_connect(this,  4,  9,   0.00766658232, 1)
 traub_connect(this,  4,  10,   0.00766658232, 1)
 traub_connect(this,  4,  11,   0.00766658232, 1)
 traub_connect(this,  5,  12,   0.00766658232, 1)
 traub_connect(this,  5,  13,   0.00766658232, 1)
 traub_connect(this,  5,  14,   0.00766658232, 1)
 traub_connect(this,  6,  7,   0.00598951744, 1)
 traub_connect(this,  6,  8,   0.00598951744, 1)
 traub_connect(this,  7,  8,   0.00598951744, 1)
 traub_connect(this,  9,  10,   0.00598951744, 1)
 traub_connect(this,  9,  11,   0.00598951744, 1)
 traub_connect(this,  10,  11,   0.00598951744, 1)
 traub_connect(this,  12,  13,   0.00598951744, 1)
 traub_connect(this,  12,  14,   0.00598951744, 1)
 traub_connect(this,  13,  14,   0.00598951744, 1)
 traub_connect(this,  15,  16,   0.0174185429,  1.)
 traub_connect(this,  15,  17,   0.0174185429,  1.)
 traub_connect(this,  15,  18,   0.0174185429,  1.)
 traub_connect(this,  16,  19,   0.00766658232, 1)
 traub_connect(this,  16,  20,   0.00766658232, 1)
 traub_connect(this,  16,  21,   0.00766658232, 1)
 traub_connect(this,  17,  22,   0.00766658232, 1)
 traub_connect(this,  17,  23,   0.00766658232, 1)
 traub_connect(this,  17,  24,   0.00766658232, 1)
 traub_connect(this,  18,  25,   0.00766658232, 1)
 traub_connect(this,  18,  26,   0.00766658232, 1)
 traub_connect(this,  18,  27,   0.00766658232, 1)
 traub_connect(this,  19,  20,   0.00598951744, 1)
 traub_connect(this,  19,  21,   0.00598951744, 1)
 traub_connect(this,  20,  21,   0.00598951744, 1)
 traub_connect(this,  22,  23,   0.00598951744, 1)
 traub_connect(this,  22,  24,   0.00598951744, 1)
 traub_connect(this,  23,  24,   0.00598951744, 1)
 traub_connect(this,  25,  26,   0.00598951744, 1)
 traub_connect(this,  25,  27,   0.00598951744, 1)
 traub_connect(this,  26,  27,   0.00598951744, 1)
 traub_connect(this,  28,  29,   0.0174185429,  1.)
 traub_connect(this,  28,  30,   0.0174185429,  1.)
 traub_connect(this,  28,  31,   0.0174185429,  1.)
 traub_connect(this,  29,  32,   0.00766658232, 1)
 traub_connect(this,  29,  33,   0.00766658232, 1)
 traub_connect(this,  29,  34,   0.00766658232, 1)
 traub_connect(this,  30,  35,   0.00766658232, 1)
 traub_connect(this,  30,  36,   0.00766658232, 1)
 traub_connect(this,  30,  37,   0.00766658232, 1)
 traub_connect(this,  31,  38,   0.00766658232, 1)
 traub_connect(this,  31,  39,   0.00766658232, 1)
 traub_connect(this,  31,  40,   0.00766658232, 1)
 traub_connect(this,  32,  33,   0.00598951744, 1)
 traub_connect(this,  32,  34,   0.00598951744, 1)
 traub_connect(this,  33,  34,   0.00598951744, 1)
 traub_connect(this,  35,  36,   0.00598951744, 1)
 traub_connect(this,  35,  37,   0.00598951744, 1)
 traub_connect(this,  36,  37,   0.00598951744, 1)
 traub_connect(this,  38,  39,   0.00598951744, 1)
 traub_connect(this,  38,  40,   0.00598951744, 1)
 traub_connect(this,  39,  40,   0.00598951744, 1)
 traub_connect(this,  41,  42,   0.0174185429,  1.)
 traub_connect(this,  41,  43,   0.0174185429,  1.)
 traub_connect(this,  41,  44,   0.0174185429,  1.)
 traub_connect(this,  42,  45,   0.00766658232, 1)
 traub_connect(this,  42,  46,   0.00766658232, 1)
 traub_connect(this,  42,  47,   0.00766658232, 1)
 traub_connect(this,  43,  48,   0.00766658232, 1)
 traub_connect(this,  43,  49,   0.00766658232, 1)
 traub_connect(this,  43,  50,   0.00766658232, 1)
 traub_connect(this,  44,  51,   0.00766658232, 1)
 traub_connect(this,  44,  52,   0.00766658232, 1)
 traub_connect(this,  44,  53,   0.00766658232, 1)
 traub_connect(this,  45,  46,   0.00598951744, 1)
 traub_connect(this,  45,  47,   0.00598951744, 1)
 traub_connect(this,  46,  47,   0.00598951744, 1)
 traub_connect(this,  48,  49,   0.00598951744, 1)
 traub_connect(this,  48,  50,   0.00598951744, 1)
 traub_connect(this,  49,  50,   0.00598951744, 1)
 traub_connect(this,  51,  52,   0.00598951744, 1)
 traub_connect(this,  51,  53,   0.00598951744, 1)
 traub_connect(this,  52,  53,   0.00598951744, 1)
 traub_connect(this,  54,  55,   0.0174185429,  1.)
 traub_connect(this,  54,  56,   0.0174185429,  1.)
 traub_connect(this,  54,  57,   0.0174185429,  1.)
 traub_connect(this,  55,  58,   0.00766658232, 1)
 traub_connect(this,  55,  59,   0.00766658232, 1)
 traub_connect(this,  55,  60,   0.00766658232, 1)
 traub_connect(this,  56,  61,   0.00766658232, 1)
 traub_connect(this,  56,  62,   0.00766658232, 1)
 traub_connect(this,  56,  63,   0.00766658232, 1)
 traub_connect(this,  57,  64,   0.00766658232, 1)
 traub_connect(this,  57,  65,   0.00766658232, 1)
 traub_connect(this,  57,  66,   0.00766658232, 1)
 traub_connect(this,  58,  59,   0.00598951744, 1)
 traub_connect(this,  58,  60,   0.00598951744, 1)
 traub_connect(this,  59,  60,   0.00598951744, 1)
 traub_connect(this,  61,  62,   0.00598951744, 1)
 traub_connect(this,  61,  63,   0.00598951744, 1)
 traub_connect(this,  62,  63,   0.00598951744, 1)
 traub_connect(this,  64,  65,   0.00598951744, 1)
 traub_connect(this,  64,  66,   0.00598951744, 1)
 traub_connect(this,  65,  66,   0.00598951744, 1)
 traub_connect(this,  67,  68,   0.0174185429,  1.)
 traub_connect(this,  67,  69,   0.0174185429,  1.)
 traub_connect(this,  67,  70,   0.0174185429,  1.)
 traub_connect(this,  68,  71,   0.00766658232, 1)
 traub_connect(this,  68,  72,   0.00766658232, 1)
 traub_connect(this,  68,  73,   0.00766658232, 1)
 traub_connect(this,  69,  74,   0.00766658232, 1)
 traub_connect(this,  69,  75,   0.00766658232, 1)
 traub_connect(this,  69,  76,   0.00766658232, 1)
 traub_connect(this,  70,  77,   0.00766658232, 1)
 traub_connect(this,  70,  78,   0.00766658232, 1)
 traub_connect(this,  70,  79,   0.00766658232, 1)
 traub_connect(this,  71,  72,   0.00598951744, 1)
 traub_connect(this,  71,  73,   0.00598951744, 1)
 traub_connect(this,  72,  73,   0.00598951744, 1)
 traub_connect(this,  74,  75,   0.00598951744, 1)
 traub_connect(this,  74,  76,   0.00598951744, 1)
 traub_connect(this,  75,  76,   0.00598951744, 1)
 traub_connect(this,  77,  78,   0.00598951744, 1)
 traub_connect(this,  77,  79,   0.00598951744, 1)
 traub_connect(this,  78,  79,   0.00598951744, 1)
 traub_connect(this,  80,  81,   0.0174185429,  1.)
 traub_connect(this,  80,  82,   0.0174185429,  1.)
 traub_connect(this,  80,  83,   0.0174185429,  1.)
 traub_connect(this,  81,  84,   0.00766658232, 1)
 traub_connect(this,  81,  85,   0.00766658232, 1)
 traub_connect(this,  81,  86,   0.00766658232, 1)
 traub_connect(this,  82,  87,   0.00766658232, 1)
 traub_connect(this,  82,  88,   0.00766658232, 1)
 traub_connect(this,  82,  89,   0.00766658232, 1)
 traub_connect(this,  83,  90,   0.00766658232, 1)
 traub_connect(this,  83,  91,   0.00766658232, 1)
 traub_connect(this,  83,  92,   0.00766658232, 1)
 traub_connect(this,  84,  85,   0.00598951744, 1)
 traub_connect(this,  84,  86,   0.00598951744, 1)
 traub_connect(this,  85,  86,   0.00598951744, 1)
 traub_connect(this,  87,  88,   0.00598951744, 1)
 traub_connect(this,  87,  89,   0.00598951744, 1)
 traub_connect(this,  88,  89,   0.00598951744, 1)
 traub_connect(this,  90,  91,   0.00598951744, 1)
 traub_connect(this,  90,  92,   0.00598951744, 1)
 traub_connect(this,  91,  92,   0.00598951744, 1)
 traub_connect(this,  93,  94,   0.0174185429,  1.)
 traub_connect(this,  93,  95,   0.0174185429,  1.)
 traub_connect(this,  93,  96,   0.0174185429,  1.)
 traub_connect(this,  94,  97,   0.00766658232, 1)
 traub_connect(this,  94,  98,   0.00766658232, 1)
 traub_connect(this,  94,  99,   0.00766658232, 1)
 traub_connect(this,  95,  100,   0.00766658232, 1)
 traub_connect(this,  95,  101,   0.00766658232, 1)
 traub_connect(this,  95,  102,   0.00766658232, 1)
 traub_connect(this,  96,  103,   0.00766658232, 1)
 traub_connect(this,  96,  104,   0.00766658232, 1)
 traub_connect(this,  96,  105,   0.00766658232, 1)
 traub_connect(this,  97,  98,   0.00598951744, 1)
 traub_connect(this,  97,  99,   0.00598951744, 1)
 traub_connect(this,  98,  99,   0.00598951744, 1)
 traub_connect(this,  100,  101,   0.00598951744, 1)
 traub_connect(this,  100,  102,   0.00598951744, 1)
 traub_connect(this,  101,  102,   0.00598951744, 1)
 traub_connect(this,  103,  104,   0.00598951744, 1)
 traub_connect(this,  103,  105,   0.00598951744, 1)
 traub_connect(this,  104,  105,   0.00598951744, 1)
 traub_connect(this,  106,  107,   0.0174185429,  1.)
 traub_connect(this,  106,  108,   0.0174185429,  1.)
 traub_connect(this,  106,  109,   0.0174185429,  1.)
 traub_connect(this,  107,  110,   0.00766658232, 1)
 traub_connect(this,  107,  111,   0.00766658232, 1)
 traub_connect(this,  107,  112,   0.00766658232, 1)
 traub_connect(this,  108,  113,   0.00766658232, 1)
 traub_connect(this,  108,  114,   0.00766658232, 1)
 traub_connect(this,  108,  115,   0.00766658232, 1)
 traub_connect(this,  109,  116,   0.00766658232, 1)
 traub_connect(this,  109,  117,   0.00766658232, 1)
 traub_connect(this,  109,  118,   0.00766658232, 1)
 traub_connect(this,  110,  111,   0.00598951744, 1)
 traub_connect(this,  110,  112,   0.00598951744, 1)
 traub_connect(this,  111,  112,   0.00598951744, 1)
 traub_connect(this,  113,  114,   0.00598951744, 1)
 traub_connect(this,  113,  115,   0.00598951744, 1)
 traub_connect(this,  114,  115,   0.00598951744, 1)
 traub_connect(this,  116,  117,   0.00598951744, 1)
 traub_connect(this,  116,  118,   0.00598951744, 1)
 traub_connect(this,  117,  118,   0.00598951744, 1)
 traub_connect(this,  119,  120,   0.0174185429,  1.)
 traub_connect(this,  119,  121,   0.0174185429,  1.)
 traub_connect(this,  119,  122,   0.0174185429,  1.)
 traub_connect(this,  120,  123,   0.00766658232, 1)
 traub_connect(this,  120,  124,   0.00766658232, 1)
 traub_connect(this,  120,  125,   0.00766658232, 1)
 traub_connect(this,  121,  126,   0.00766658232, 1)
 traub_connect(this,  121,  127,   0.00766658232, 1)
 traub_connect(this,  121,  128,   0.00766658232, 1)
 traub_connect(this,  122,  129,   0.00766658232, 1)
 traub_connect(this,  122,  130,   0.00766658232, 1)
 traub_connect(this,  122,  131,   0.00766658232, 1)
 traub_connect(this,  123,  124,   0.00598951744, 1)
 traub_connect(this,  123,  125,   0.00598951744, 1)
 traub_connect(this,  124,  125,   0.00598951744, 1)
 traub_connect(this,  126,  127,   0.00598951744, 1)
 traub_connect(this,  126,  128,   0.00598951744, 1)
 traub_connect(this,  127,  128,   0.00598951744, 1)
 traub_connect(this,  129,  130,   0.00598951744, 1)
 traub_connect(this,  129,  131,   0.00598951744, 1)
 traub_connect(this,  130,  131,   0.00598951744, 1)
 traub_connect(this,  132,  133,   0.0348744292,  1.)
 traub_connect(this,  133,  134,   0.0208024203, 1)
 traub_connect(this,  133,  136,   0.0208024203, 1)
 traub_connect(this,  134,  135,   0.01570795,  1.)
 traub_connect(this,  134,  136,   0.01570795, 1)
 traub_connect(this,  136,  137,   0.01570795,  1.)
 access comp[1] // handy statement if want to start gui's from nrnmainmenu
 }
         proc geom() {
 // the "traub level" subsets are created and defined below
 top_level =  4
 objref level[top_level+1]
 for i=0,top_level { level[i] = new SectionList() }
  
 comp[ 1] { level[ 1].append() L=  42. diam = 2*  10. }
 comp[ 2] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 3] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 4] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 5] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 6] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 7] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 8] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 9] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 10] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 11] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 12] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 13] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 14] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 15] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 16] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 17] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 18] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 19] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 20] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 21] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 22] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 23] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 24] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 25] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 26] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 27] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 28] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 29] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 30] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 31] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 32] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 33] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 34] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 35] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 36] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 37] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 38] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 39] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 40] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 41] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 42] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 43] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 44] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 45] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 46] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 47] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 48] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 49] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 50] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 51] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 52] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 53] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 54] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 55] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 56] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 57] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 58] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 59] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 60] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 61] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 62] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 63] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 64] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 65] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 66] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 67] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 68] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 69] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 70] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 71] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 72] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 73] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 74] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 75] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 76] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
       geom1() /* arbitrary subdivision of geom helps
     to large a function problem in tcr_template */
 }
         proc geom1() {
 comp[ 77] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 78] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 79] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 80] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 81] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 82] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 83] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 84] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 85] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 86] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 87] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 88] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 89] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 90] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 91] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 92] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 93] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 94] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 95] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 96] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 97] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 98] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 99] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 100] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 101] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 102] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 103] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 104] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 105] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 106] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 107] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 108] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 109] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 110] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 111] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 112] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 113] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 114] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 115] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 116] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 117] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 118] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 119] { level[ 2].append() L=  20. diam = 2*  0.73 }
 comp[ 120] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 121] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 122] { level[ 3].append() L=  57.5 diam = 2*  0.584 }
 comp[ 123] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 124] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 125] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 126] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 127] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 128] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 129] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 130] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 131] { level[ 4].append() L=  57.5 diam = 2*  0.438 }
 comp[ 132] { level[ 0].append() L=  50. diam = 2*  0.8 }
 comp[ 133] { level[ 0].append() L=  50. diam = 2*  0.7 }
 comp[ 134] { level[ 0].append() L=  50. diam = 2*  0.5 }
 comp[ 135] { level[ 0].append() L=  50. diam = 2*  0.5 }
 comp[ 136] { level[ 0].append() L=  50. diam = 2*  0.5 }
 comp[ 137] { level[ 0].append() L=  50. diam = 2*  0.5 }
 } 
 // Here are some commonly used subsets of sections
         objref all
         proc subsets() { local i
           objref Soma, Dendrites, Soma_Dendrites, Axon
           objref all
           Soma = new SectionList()
           Dendrites = new SectionList()
           Soma_Dendrites = new SectionList()
           Axon = new SectionList()
           for i=1,top_level {
             forsec level[i] { // recall level 0 is axon, 1 is soma, higher are dends
               Soma_Dendrites.append()
                 if (i>1) {Dendrites.append()}
             }
           }
           forsec level[1] {
             Soma.append()
           }
           forsec level[0] { Axon.append() }
           all = new SectionList()
           for i=1, 137 comp[i] all.append()
          }
 
        proc shape1() {
 
    comp[1] {pt3dclear() pt3dadd(0.0, 0.0, 0.0, 20.0) pt3dadd(0.0, 21.0, 0.0, 20.0)}
    comp[1] {pt3dadd(-9.179392E-7, 42.0, 0.0, 20.0)}
    comp[132] {pt3dclear() pt3dadd(9.179392E-7, 0.0, 0.0, 1.6) pt3dadd(-1.7484616E-7, -25.0, 0.0, 1.6)}
    comp[132] {pt3dadd(-1.2676315E-6, -50.0, 0.0, 1.6)}
    comp[119] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(-5.87726, 42.0, 8.089361, 1.46)}
    comp[119] {pt3dadd(-11.7550955, 42.000004, 16.179533, 1.46)}
    comp[106] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(5.877265, 42.0, -8.08936, 1.46)}
    comp[106] {pt3dadd(11.75513, 42.00003, -16.17959, 1.46)}
    comp[93] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(9.509614, 42.0, 3.08986, 1.46)}
    comp[93] {pt3dadd(19.020178, 42.00001, 6.180023, 1.46)}
    comp[80] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(5.877265, 42.0, 8.089361, 1.46)}
    comp[80] {pt3dadd(11.7551365, 42.000015, 16.179583, 1.46)}
    comp[67] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(0.44429666, 42.0, -9.99, 1.46)}
    comp[67] {pt3dadd(0.88859874, 42.0, -19.9802, 1.46)}
    comp[54] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(-0.44429934, 42.0, 9.99, 1.46)}
    comp[54] {pt3dadd(-0.8886023, 42.0, 19.9802, 1.46)}
    comp[41] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(-9.50961, 42.0, -3.089861, 1.46)}
    comp[41] {pt3dadd(-19.020224, 42.000023, -6.1800547, 1.46)}
    comp[28] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(-5.87726, 42.0, -8.08936, 1.46)}
    comp[28] {pt3dadd(-11.755103, 42.000008, -16.179535, 1.46)}
    comp[15] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(-9.50961, 42.0, 3.089861, 1.46)}
    comp[15] {pt3dadd(-19.020226, 42.00004, 6.1800585, 1.46)}
    comp[2] {pt3dclear() pt3dadd(-9.179392E-7, 42.0, 0.0, 1.46) pt3dadd(9.509614, 42.0, -3.089861, 1.46)}
    comp[2] {pt3dadd(19.020168, 41.999996, -6.1800375, 1.46)}
    comp[133] {pt3dclear() pt3dadd(-1.2676315E-6, -50.0, 0.0, 1.4) pt3dadd(-3.9497368E-6, -75.0, 0.0, 1.4)}
    comp[133] {pt3dadd(-6.6318216E-6, -100.0, 0.0, 1.4)}
    comp[122] {pt3dclear() pt3dadd(-11.7550955, 42.000004, 16.179533, 1.168) pt3dadd(-18.567154, 44.880123, 43.961975, 1.168)}
    comp[122] {pt3dadd(-25.37945, 47.760193, 71.744415, 1.168)}
    comp[121] {pt3dclear() pt3dadd(-11.7550955, 42.000004, 16.179533, 1.168) pt3dadd(-28.653934, 41.999992, 39.438736, 1.168)}
    comp[121] {pt3dadd(-45.552567, 42.000015, 62.6979, 1.168)}
    comp[120] {pt3dclear() pt3dadd(-11.7550955, 42.000004, 16.179533, 1.168) pt3dadd(-36.072685, 39.119892, 31.243484, 1.168)}
    comp[120] {pt3dadd(-60.39009, 36.239807, 46.307327, 1.168)}
    comp[109] {pt3dclear() pt3dadd(11.75513, 42.00003, -16.17959, 1.168) pt3dadd(33.232132, 33.51822, -33.30729, 1.168)}
    comp[109] {pt3dadd(54.709126, 25.036484, -50.43508, 1.168)}
    comp[108] {pt3dclear() pt3dadd(11.75513, 42.00003, -16.17959, 1.168) pt3dadd(28.653934, 42.000042, -39.438816, 1.168)}
    comp[108] {pt3dadd(45.55289, 42.00022, -62.698498, 1.168)}
    comp[107] {pt3dclear() pt3dadd(11.75513, 42.00003, -16.17959, 1.168) pt3dadd(21.407784, 50.481857, -41.898212, 1.168)}
    comp[107] {pt3dadd(31.060482, 58.963715, -67.616936, 1.168)}
    comp[96] {pt3dclear() pt3dadd(19.020178, 42.00001, 6.180023, 1.168) pt3dadd(43.342514, 31.157368, 17.016235, 1.168)}
    comp[96] {pt3dadd(67.66503, 20.31482, 27.852478, 1.168)}
    comp[95] {pt3dclear() pt3dadd(19.020178, 42.00001, 6.180023, 1.168) pt3dadd(46.363018, 41.999996, 15.064248, 1.168)}
    comp[95] {pt3dadd(73.705666, 41.99999, 23.948406, 1.168)}
    comp[94] {pt3dclear() pt3dadd(19.020178, 42.00001, 6.180023, 1.168) pt3dadd(45.066757, 52.842632, 11.709659, 1.168)}
    comp[94] {pt3dadd(71.11335, 63.685265, 17.239292, 1.168)}
    comp[83] {pt3dclear() pt3dadd(11.7551365, 42.000015, 16.179583, 1.168) pt3dadd(34.056313, 34.515747, 32.708527, 1.168)}
    comp[83] {pt3dadd(56.35762, 27.031525, 49.23774, 1.168)}
    comp[82] {pt3dclear() pt3dadd(11.7551365, 42.000015, 16.179583, 1.168) pt3dadd(28.653938, 42.000027, 39.438812, 1.168)}
    comp[82] {pt3dadd(45.552658, 42.000065, 62.697968, 1.168)}
    comp[81] {pt3dclear() pt3dadd(11.7551365, 42.000015, 16.179583, 1.168) pt3dadd(20.583645, 49.48428, 42.496964, 1.168)}
    comp[81] {pt3dadd(29.412083, 56.96856, 68.81427, 1.168)}
    comp[70] {pt3dclear() pt3dadd(0.88859874, 42.0, -19.9802, 1.168) pt3dadd(13.205743, 41.007107, -45.939056, 1.168)}
    comp[70] {pt3dadd(25.522982, 40.014202, -71.897804, 1.168)}
    comp[69] {pt3dclear() pt3dadd(0.88859874, 42.0, -19.9802, 1.168) pt3dadd(2.1659646, 42.000004, -48.701797, 1.168)}
    comp[69] {pt3dadd(3.4433362, 42.0, -77.42289, 1.168)}
    comp[68] {pt3dclear() pt3dadd(0.88859874, 42.0, -19.9802, 1.168) pt3dadd(-9.075516, 42.9929, -46.92994, 1.168)}
    comp[68] {pt3dadd(-19.039633, 43.9858, -73.87999, 1.168)}
    comp[57] {pt3dclear() pt3dadd(-0.8886023, 42.0, 19.9802, 1.168) pt3dadd(9.07551, 42.9929, 46.92994, 1.168)}
    comp[57] {pt3dadd(19.039625, 43.985806, 73.87999, 1.168)}
    comp[56] {pt3dclear() pt3dadd(-0.8886023, 42.0, 19.9802, 1.168) pt3dadd(-2.1659708, 42.0, 48.701797, 1.168)}
    comp[56] {pt3dadd(-3.4433446, 42.0, 77.42289, 1.168)}
    comp[55] {pt3dclear() pt3dadd(-0.8886023, 42.0, 19.9802, 1.168) pt3dadd(-13.205749, 41.007103, 45.939056, 1.168)}
    comp[55] {pt3dadd(-25.52299, 40.0142, 71.897804, 1.168)}
    comp[44] {pt3dclear() pt3dadd(-19.020224, 42.000023, -6.1800547, 1.168) pt3dadd(-43.263966, 52.77403, -17.258093, 1.168)}
    comp[44] {pt3dadd(-67.507614, 63.54805, -28.336105, 1.168)}
    comp[43] {pt3dclear() pt3dadd(-19.020224, 42.000023, -6.1800547, 1.168) pt3dadd(-46.363075, 42.000042, -15.064296, 1.168)}
    comp[43] {pt3dadd(-73.705826, 42.000095, -23.948511, 1.168)}
    comp[42] {pt3dclear() pt3dadd(-19.020224, 42.000023, -6.1800547, 1.168) pt3dadd(-45.145355, 31.226013, -11.467863, 1.168)}
    comp[42] {pt3dadd(-71.27077, 20.452072, -16.755781, 1.168)}
    comp[31] {pt3dclear() pt3dadd(-11.755103, 42.000008, -16.179535, 1.168) pt3dadd(-20.992151, 50.010513, -42.200153, 1.168)}
    comp[31] {pt3dadd(-30.229197, 58.021027, -68.22078, 1.168)}
    comp[30] {pt3dclear() pt3dadd(-11.755103, 42.000008, -16.179535, 1.168) pt3dadd(-28.653908, 41.999996, -39.438744, 1.168)}
    comp[30] {pt3dadd(-45.55259, 41.99999, -62.697796, 1.168)}
    comp[29] {pt3dclear() pt3dadd(-11.755103, 42.000008, -16.179535, 1.168) pt3dadd(-33.647755, 33.989483, -33.005283, 1.168)}
    comp[29] {pt3dadd(-55.54046, 25.979021, -49.831215, 1.168)}
    comp[18] {pt3dclear() pt3dadd(-19.020226, 42.00004, 6.1800585, 1.168) pt3dadd(-43.416378, 52.90137, 16.789074, 1.168)}
    comp[18] {pt3dadd(-67.81264, 63.80274, 27.398129, 1.168)}
    comp[17] {pt3dclear() pt3dadd(-19.020226, 42.00004, 6.1800585, 1.168) pt3dadd(-46.36307, 42.000057, 15.064298, 1.168)}
    comp[17] {pt3dadd(-73.70635, 42.00029, 23.948729, 1.168)}
    comp[16] {pt3dclear() pt3dadd(-19.020226, 42.00004, 6.1800585, 1.168) pt3dadd(-44.992924, 31.098736, 11.9368925, 1.168)}
    comp[16] {pt3dadd(-70.96569, 20.197525, 17.693771, 1.168)}
    comp[5] {pt3dclear() pt3dadd(19.020168, 41.999996, -6.1800375, 1.168) pt3dadd(47.39121, 46.359837, -4.555674, 1.168)}
    comp[5] {pt3dadd(75.76205, 50.719646, -2.9313235, 1.168)}
    comp[4] {pt3dclear() pt3dadd(19.020168, 41.999996, -6.1800375, 1.168) pt3dadd(46.36304, 42.00001, -15.064235, 1.168)}
    comp[4] {pt3dadd(73.70571, 41.999973, -23.948502, 1.168)}
    comp[3] {pt3dclear() pt3dadd(19.020168, 41.999996, -6.1800375, 1.168) pt3dadd(41.018032, 37.640137, -24.170292, 1.168)}
    comp[3] {pt3dadd(63.016083, 33.280357, -42.160416, 1.168)}
    comp[136] {pt3dclear() pt3dadd(-6.6318216E-6, -100.0, 0.0, 1.0) pt3dadd(-9.735474, -123.02701, 0.0, 1.0)}
    comp[136] {pt3dadd(-19.470892, -146.053, 0.0, 1.0)}
    comp[134] {pt3dclear() pt3dadd(-6.6318216E-6, -100.0, 0.0, 1.0) pt3dadd(9.735456, -123.02701, 0.0, 1.0)}
    comp[134] {pt3dadd(19.470907, -146.053, 0.0, 1.0)}
    comp[131] {pt3dclear() pt3dadd(-25.37945, 47.760193, 71.744415, 0.876) pt3dadd(-21.029491, 53.065697, 99.66395, 0.876)}
    comp[131] {pt3dadd(-16.678543, 58.371376, 127.58321, 0.876)}
    comp[130] {pt3dclear() pt3dadd(-25.37945, 47.760193, 71.744415, 0.876) pt3dadd(-32.19127, 50.640335, 99.52668, 0.876)}
    comp[130] {pt3dadd(-39.003105, 53.520477, 127.30895, 0.876)}
    comp[129] {pt3dclear() pt3dadd(-25.37945, 47.760193, 71.744415, 0.876) pt3dadd(-42.277824, 47.760246, 95.00342, 0.876)}
    comp[129] {pt3dadd(-59.177048, 47.760204, 118.26294, 0.876)}
    comp[128] {pt3dclear() pt3dadd(-45.552567, 42.000015, 62.6979, 0.876) pt3dadd(-52.365227, 44.880062, 90.48068, 0.876)}
    comp[128] {pt3dadd(-59.177048, 47.760204, 118.26294, 0.876)}
    comp[127] {pt3dclear() pt3dadd(-45.552567, 42.000015, 62.6979, 0.876) pt3dadd(-62.45179, 41.999973, 85.95743, 0.876)}
    comp[127] {pt3dadd(-79.35017, 42.000027, 109.216415, 0.876)}

    comp[126] {pt3dclear() pt3dadd(-45.552567, 42.000015, 62.6979, 0.876) pt3dadd(-69.87015, 39.119907, 77.76185, 0.876)}
    comp[126] {pt3dadd(-94.18774, 36.2398, 92.8258, 0.876)}
    comp[125] {pt3dclear() pt3dadd(-60.39009, 36.239807, 46.307327, 0.876) pt3dadd(-77.289345, 36.239746, 69.56679, 0.876)}
    comp[125] {pt3dadd(-94.18774, 36.2398, 92.8258, 0.876)}
    comp[124] {pt3dclear() pt3dadd(-60.39009, 36.239807, 46.307327, 0.876) pt3dadd(-84.70768, 33.359695, 61.371277, 0.876)}
    comp[124] {pt3dadd(-109.02527, 30.479588, 76.43523, 0.876)}
    comp[123] {pt3dclear() pt3dadd(-60.39009, 36.239807, 46.307327, 0.876) pt3dadd(-88.28765, 30.934244, 50.797966, 0.876)}
    comp[123] {pt3dadd(-116.18438, 25.62878, 55.288086, 0.876)}
    comp[118] {pt3dclear() pt3dadd(54.709126, 25.036484, -50.43508, 0.876) pt3dadd(77.37341, 9.411922, -58.72691, 0.876)}
    comp[118] {pt3dadd(100.03817, -6.212467, -67.01964, 0.876)}
    comp[117] {pt3dclear() pt3dadd(54.709126, 25.036484, -50.43508, 0.876) pt3dadd(76.18608, 16.554726, -67.5628, 0.876)}
    comp[117] {pt3dadd(97.66311, 8.072891, -84.6905, 0.876)}
    comp[116] {pt3dclear() pt3dadd(54.709126, 25.036484, -50.43508, 0.876) pt3dadd(71.60803, 25.036524, -73.694496, 0.876)}
    comp[116] {pt3dadd(88.50687, 25.036634, -96.9539, 0.876)}
    comp[115] {pt3dclear() pt3dadd(45.55289, 42.00022, -62.698498, 0.876) pt3dadd(67.029915, 33.518394, -79.826195, 0.876)}
    comp[115] {pt3dadd(88.50687, 25.036634, -96.9539, 0.876)}
    comp[114] {pt3dclear() pt3dadd(45.55289, 42.00022, -62.698498, 0.876) pt3dadd(62.4514, 42.00003, -85.957016, 0.876)}
    comp[114] {pt3dadd(79.350235, 42.00014, -109.21642, 0.876)}
    comp[113] {pt3dclear() pt3dadd(45.55289, 42.00022, -62.698498, 0.876) pt3dadd(55.20534, 50.481945, -88.41669, 0.876)}
    comp[113] {pt3dadd(64.85825, 58.963825, -114.135735, 0.876)}
    comp[112] {pt3dclear() pt3dadd(31.060482, 58.963715, -67.616936, 0.876) pt3dadd(47.959354, 58.963787, -90.876335, 0.876)}
    comp[112] {pt3dadd(64.85825, 58.963825, -114.135735, 0.876)}
    comp[111] {pt3dclear() pt3dadd(31.060482, 58.963715, -67.616936, 0.876) pt3dadd(40.712944, 67.44543, -93.33511, 0.876)}
    comp[111] {pt3dadd(50.365795, 75.92737, -119.05418, 0.876)}
    comp[110] {pt3dclear() pt3dadd(31.060482, 58.963715, -67.616936, 0.876) pt3dadd(31.943047, 74.58819, -91.734436, 0.876)}
    comp[110] {pt3dadd(32.825565, 90.2127, -115.85193, 0.876)}
    comp[105] {pt3dclear() pt3dadd(67.66503, 20.31482, 27.852478, 0.876) pt3dadd(85.12662, 0.34132385, 38.929787, 0.876)}
    comp[105] {pt3dadd(102.58821, -19.63216, 50.0071, 0.876)}
    comp[104] {pt3dclear() pt3dadd(67.66503, 20.31482, 27.852478, 0.876) pt3dadd(91.98754, 9.4722595, 38.688717, 0.876)}
    comp[104] {pt3dadd(116.31006, -1.3702888, 49.524956, 0.876)}
    comp[103] {pt3dclear() pt3dadd(67.66503, 20.31482, 27.852478, 0.876) pt3dadd(95.00786, 20.314846, 36.736683, 0.876)}
    comp[103] {pt3dadd(122.35069, 20.314882, 45.620888, 0.876)}
    comp[102] {pt3dclear() pt3dadd(73.705666, 41.99999, 23.948406, 0.876) pt3dadd(98.028175, 31.157429, 34.78465, 0.876)}
    comp[102] {pt3dadd(122.3507, 20.314789, 45.62092, 0.876)}
    comp[101] {pt3dclear() pt3dadd(73.705666, 41.99999, 23.948406, 0.876) pt3dadd(101.0485, 41.999924, 32.83264, 0.876)}
    comp[101] {pt3dadd(128.39134, 41.999954, 41.71685, 0.876)}
    comp[100] {pt3dclear() pt3dadd(73.705666, 41.99999, 23.948406, 0.876) pt3dadd(99.75235, 52.842606, 29.478073, 0.876)}
    comp[100] {pt3dadd(125.79903, 63.68526, 35.00773, 0.876)}
    comp[99] {pt3dclear() pt3dadd(71.11335, 63.685265, 17.239292, 0.876) pt3dadd(98.456184, 63.68526, 26.123516, 0.876)}
    comp[99] {pt3dadd(125.79903, 63.68526, 35.00773, 0.876)}
    comp[98] {pt3dclear() pt3dadd(71.11335, 63.685265, 17.239292, 0.876) pt3dadd(97.16003, 74.52787, 22.768963, 0.876)}
    comp[98] {pt3dadd(123.206696, 85.37058, 28.298603, 0.876)}
    comp[97] {pt3dclear() pt3dadd(71.11335, 63.685265, 17.239292, 0.876) pt3dadd(91.75117, 83.658615, 18.541252, 0.876)}
    comp[97] {pt3dadd(112.38899, 103.63197, 19.843212, 0.876)}
    comp[92] {pt3dclear() pt3dadd(56.35762, 27.031525, 49.23774, 0.876) pt3dadd(80.54034, 13.244663, 56.427048, 0.876)}
    comp[92] {pt3dadd(104.72254, -0.5422821, 63.61551, 0.876)}
    comp[91] {pt3dclear() pt3dadd(56.35762, 27.031525, 49.23774, 0.876) pt3dadd(78.65866, 19.547329, 65.76663, 0.876)}
    comp[91] {pt3dadd(100.95976, 12.063074, 82.29551, 0.876)}
    comp[90] {pt3dclear() pt3dadd(56.35762, 27.031525, 49.23774, 0.876) pt3dadd(73.25647, 27.031612, 72.49717, 0.876)}
    comp[90] {pt3dadd(90.15488, 27.031548, 95.75571, 0.876)}
    comp[89] {pt3dclear() pt3dadd(45.552658, 42.000065, 62.697968, 0.876) pt3dadd(67.85377, 34.51581, 79.22684, 0.876)}
    comp[89] {pt3dadd(90.15488, 27.031548, 95.75571, 0.876)}
    comp[88] {pt3dclear() pt3dadd(45.552658, 42.000065, 62.697968, 0.876) pt3dadd(62.451576, 42.000088, 85.957375, 0.876)}
    comp[88] {pt3dadd(79.35048, 42.000114, 109.21677, 0.876)}
    comp[87] {pt3dclear() pt3dadd(45.552658, 42.000065, 62.697968, 0.876) pt3dadd(54.381298, 49.48432, 89.01551, 0.876)}
    comp[87] {pt3dadd(63.2099, 56.968613, 115.33306, 0.876)}
    comp[86] {pt3dclear() pt3dadd(29.412083, 56.96856, 68.81427, 0.876) pt3dadd(46.311005, 56.968575, 92.07366, 0.876)}
    comp[86] {pt3dadd(63.209904, 56.968605, 115.33306, 0.876)}
    comp[85] {pt3dclear() pt3dadd(29.412083, 56.96856, 68.81427, 0.876) pt3dadd(38.240707, 64.452835, 95.13181, 0.876)}
    comp[85] {pt3dadd(47.069324, 71.9371, 121.449356, 0.876)}
    comp[84] {pt3dclear() pt3dadd(29.412083, 56.96856, 68.81427, 0.876) pt3dadd(28.776363, 70.75544, 94.03465, 0.876)}
    comp[84] {pt3dadd(28.141151, 84.54241, 119.25589, 0.876)}
    comp[79] {pt3dclear() pt3dadd(25.522982, 40.014202, -71.897804, 0.876) pt3dadd(46.935406, 38.185158, -90.995415, 0.876)}
    comp[79] {pt3dadd(68.347725, 36.35613, -110.094, 0.876)}
    comp[78] {pt3dclear() pt3dadd(25.522982, 40.014202, -71.897804, 0.876) pt3dadd(37.840126, 39.02131, -97.856766, 0.876)}
    comp[78] {pt3dadd(50.15736, 38.028408, -123.81572, 0.876)}
    comp[77] {pt3dclear() pt3dadd(25.522982, 40.014202, -71.897804, 0.876) pt3dadd(26.800293, 40.01421, -100.619804, 0.876)}
    comp[77] {pt3dadd(28.077707, 40.014206, -129.34082, 0.876)}
    comp[76] {pt3dclear() pt3dadd(3.4433362, 42.0, -77.42289, 0.876) pt3dadd(15.760565, 41.0071, -103.38186, 0.876)}
    comp[76] {pt3dadd(28.077707, 40.014206, -129.34082, 0.876)}
    comp[75] {pt3dclear() pt3dadd(3.4433362, 42.0, -77.42289, 0.876) pt3dadd(4.720708, 42.000004, -106.144905, 0.876)}
    comp[75] {pt3dadd(5.9980702, 42.000008, -134.86691, 0.876)}
    comp[74] {pt3dclear() pt3dadd(3.4433362, 42.0, -77.42289, 0.876) pt3dadd(-6.5207815, 42.9929, -104.37295, 0.876)}
    comp[74] {pt3dadd(-16.484907, 43.9858, -131.32298, 0.876)}
    comp[73] {pt3dclear() pt3dadd(-19.039633, 43.9858, -73.87999, 0.876) pt3dadd(-17.762222, 43.985794, -102.60098, 0.876)}
    comp[73] {pt3dadd(-16.484907, 43.9858, -131.32298, 0.876)}
    comp[72] {pt3dclear() pt3dadd(-19.039633, 43.9858, -73.87999, 0.876) pt3dadd(-29.003752, 44.978703, -100.83003, 0.876)}
    comp[72] {pt3dadd(-38.96787, 45.9716, -127.77908, 0.876)}
    comp[71] {pt3dclear() pt3dadd(-19.039633, 43.9858, -73.87999, 0.876) pt3dadd(-38.67214, 45.814846, -94.80339, 0.876)}
    comp[71] {pt3dadd(-58.30465, 47.64389, -115.72679, 0.876)}
    comp[66] {pt3dclear() pt3dadd(19.039625, 43.985806, 73.87999, 0.876) pt3dadd(38.67213, 45.81485, 94.80339, 0.876)}
    comp[66] {pt3dadd(58.304634, 47.643898, 115.72679, 0.876)}
    comp[65] {pt3dclear() pt3dadd(19.039625, 43.985806, 73.87999, 0.876) pt3dadd(29.00374, 44.978706, 100.83003, 0.876)}
    comp[65] {pt3dadd(38.967854, 45.971603, 127.77908, 0.876)}
    comp[64] {pt3dclear() pt3dadd(19.039625, 43.985806, 73.87999, 0.876) pt3dadd(17.76221, 43.985798, 102.60098, 0.876)}
    comp[64] {pt3dadd(16.484896, 43.985806, 131.32298, 0.876)}
	}
	
	proc shape2() {
	
    comp[63] {pt3dclear() pt3dadd(-3.4433446, 42.0, 77.42289, 0.876) pt3dadd(6.520771, 42.9929, 104.37295, 0.876)} 
    comp[63] {pt3dadd(16.484896, 43.985806, 131.32298, 0.876)}
    comp[62] {pt3dclear() pt3dadd(-3.4433446, 42.0, 77.42289, 0.876) pt3dadd(-4.7207193, 42.000004, 106.144905, 0.876)}
    comp[62] {pt3dadd(-5.9980836, 42.000004, 134.86691, 0.876)}
    comp[61] {pt3dclear() pt3dadd(-3.4433446, 42.0, 77.42289, 0.876) pt3dadd(-15.760576, 41.007095, 103.38186, 0.876)}
    comp[61] {pt3dadd(-28.077719, 40.014202, 129.34082, 0.876)}
    comp[60] {pt3dclear() pt3dadd(-25.52299, 40.0142, 71.897804, 0.876) pt3dadd(-26.800304, 40.014206, 100.619804, 0.876)}
    comp[60] {pt3dadd(-28.077719, 40.014202, 129.34082, 0.876)}
    comp[59] {pt3dclear() pt3dadd(-25.52299, 40.0142, 71.897804, 0.876) pt3dadd(-37.840134, 39.0213, 97.856766, 0.876)}
    comp[59] {pt3dadd(-50.157375, 38.0284, 123.81572, 0.876)}
    comp[58] {pt3dclear() pt3dadd(-25.52299, 40.0142, 71.897804, 0.876) pt3dadd(-46.935413, 38.18515, 90.995415, 0.876)}
    comp[58] {pt3dadd(-68.34774, 36.356117, 110.094, 0.876)}
    comp[53] {pt3dclear() pt3dadd(-67.507614, 63.54805, -28.336105, 0.876) pt3dadd(-84.82448, 83.39501, -39.85888, 0.876)}
    comp[53] {pt3dadd(-102.14227, 103.242096, -51.38199, 0.876)}

    comp[52] {pt3dclear() pt3dadd(-67.507614, 63.54805, -28.336105, 0.876) pt3dadd(-91.75155, 74.32207, -39.414207, 0.876)}
    comp[52] {pt3dadd(-115.995476, 85.09608, -50.49231, 0.876)}
    comp[51] {pt3dclear() pt3dadd(-67.507614, 63.54805, -28.336105, 0.876) pt3dadd(-94.85066, 63.548077, -37.220413, 0.876)}
    comp[51] {pt3dadd(-122.193695, 63.54812, -46.10472, 0.876)}
    comp[50] {pt3dclear() pt3dadd(-73.705826, 42.000095, -23.948511, 0.876) pt3dadd(-97.94977, 52.77409, -35.02661, 0.876)}
    comp[50] {pt3dadd(-122.19369, 63.54813, -46.10472, 0.876)}
    comp[49] {pt3dclear() pt3dadd(-73.705826, 42.000095, -23.948511, 0.876) pt3dadd(-101.048874, 42.00013, -32.832825, 0.876)}
    comp[49] {pt3dadd(-128.3919, 42.000164, -41.717125, 0.876)}
    comp[48] {pt3dclear() pt3dadd(-73.705826, 42.000095, -23.948511, 0.876) pt3dadd(-99.830864, 31.226103, -29.236294, 0.876)}
    comp[48] {pt3dadd(-125.9559, 20.452112, -34.52408, 0.876)}
    comp[47] {pt3dclear() pt3dadd(-71.27077, 20.452072, -16.755781, 0.876) pt3dadd(-98.61379, 20.452206, -25.64011, 0.876)}
    comp[47] {pt3dadd(-125.9559, 20.452112, -34.52408, 0.876)}
    comp[46] {pt3dclear() pt3dadd(-71.27077, 20.452072, -16.755781, 0.876) pt3dadd(-97.395775, 9.678177, -22.043583, 0.876)}
    comp[46] {pt3dadd(-123.52082, -1.0958176, -27.331366, 0.876)}
    comp[45] {pt3dclear() pt3dadd(-71.27077, 20.452072, -16.755781, 0.876) pt3dadd(-92.053764, 0.6051483, -17.612423, 0.876)}
    comp[45] {pt3dadd(-112.83584, -19.241909, -18.468721, 0.876)}
    comp[40] {pt3dclear() pt3dadd(-30.229197, 58.021027, -68.22078, 0.876) pt3dadd(-30.346024, 72.7773, -92.89441, 0.876)}
    comp[40] {pt3dadd(-30.46285, 87.533585, -117.568054, 0.876)}
    comp[39] {pt3dclear() pt3dadd(-30.229197, 58.021027, -68.22078, 0.876) pt3dadd(-39.466316, 66.031525, -94.24147, 0.876)}
    comp[39] {pt3dadd(-48.703354, 74.0421, -120.26219, 0.876)}
    comp[38] {pt3dclear() pt3dadd(-30.229197, 58.021027, -68.22078, 0.876) pt3dadd(-47.12799, 58.021027, -91.47999, 0.876)}
    comp[38] {pt3dadd(-64.02679, 58.021027, -114.739204, 0.876)}
    comp[37] {pt3dclear() pt3dadd(-45.55259, 41.99999, -62.697796, 0.876) pt3dadd(-54.789703, 50.01049, -88.7185, 0.876)}
    comp[37] {pt3dadd(-64.02679, 58.021027, -114.739204, 0.876)}
    comp[36] {pt3dclear() pt3dadd(-45.55259, 41.99999, -62.697796, 0.876) pt3dadd(-62.451424, 41.99994, -85.956985, 0.876)}
    comp[36] {pt3dadd(-79.3502, 41.99996, -109.2162, 0.876)}
    comp[35] {pt3dclear() pt3dadd(-45.55259, 41.99999, -62.697796, 0.876) pt3dadd(-67.44529, 33.989525, -79.52372, 0.876)}
    comp[35] {pt3dadd(-89.338066, 25.978994, -96.349625, 0.876)}
    comp[34] {pt3dclear() pt3dadd(-55.54046, 25.979021, -49.831215, 0.876) pt3dadd(-72.439224, 25.979042, -73.09043, 0.876)}
    comp[34] {pt3dadd(-89.338, 25.979063, -96.34965, 0.876)}
    comp[33] {pt3dclear() pt3dadd(-55.54046, 25.979021, -49.831215, 0.876) pt3dadd(-77.43316, 17.968561, -66.65714, 0.876)}
    comp[33] {pt3dadd(-99.325874, 9.958099, -83.48307, 0.876)}
    comp[32] {pt3dclear() pt3dadd(-55.54046, 25.979021, -49.831215, 0.876) pt3dadd(-78.97044, 11.222641, -57.56683, 0.876)}
    comp[32] {pt3dadd(-102.40043, -3.533741, -65.30246, 0.876)}
    comp[27] {pt3dclear() pt3dadd(-67.81264, 63.80274, 27.398129, 0.876) pt3dadd(-85.4104, 83.8842, 38.05694, 0.876)}
    comp[27] {pt3dadd(-103.00813, 103.96572, 48.715744, 0.876)}
    comp[26] {pt3dclear() pt3dadd(-67.81264, 63.80274, 27.398129, 0.876) pt3dadd(-92.20835, 74.70392, 38.006966, 0.876)}
    comp[26] {pt3dadd(-116.60495, 85.60541, 48.616158, 0.876)}
    comp[25] {pt3dclear() pt3dadd(-67.81264, 63.80274, 27.398129, 0.876) pt3dadd(-95.155655, 63.802834, 36.28244, 0.876)}
    comp[25] {pt3dadd(-122.49869, 63.802887, 45.166748, 0.876)}
    comp[24] {pt3dclear() pt3dadd(-73.70635, 42.00029, 23.948729, 0.876) pt3dadd(-98.102066, 52.901485, 34.557564, 0.876)}
    comp[24] {pt3dadd(-122.49869, 63.802887, 45.166748, 0.876)}
    comp[23] {pt3dclear() pt3dadd(-73.70635, 42.00029, 23.948729, 0.876) pt3dadd(-101.04851, 42.00005, 32.83268, 0.876)}
    comp[23] {pt3dadd(-128.39151, 42.00019, 41.716995, 0.876)}
    comp[22] {pt3dclear() pt3dadd(-73.70635, 42.00029, 23.948729, 0.876) pt3dadd(-99.67906, 31.098963, 29.705559, 0.876)}
    comp[22] {pt3dadd(-125.65174, 20.19772, 35.462402, 0.876)}
    comp[21] {pt3dclear() pt3dadd(-70.96569, 20.197525, 17.693771, 0.876) pt3dadd(-98.30874, 20.19758, 26.578083, 0.876)}
    comp[21] {pt3dadd(-125.65174, 20.19772, 35.462402, 0.876)}
    comp[20] {pt3dclear() pt3dadd(-70.96569, 20.197525, 17.693771, 0.876) pt3dadd(-96.93838, 9.296288, 23.450617, 0.876)}
    comp[20] {pt3dadd(-122.911095, -1.6050453, 29.207449, 0.876)}
    comp[19] {pt3dclear() pt3dadd(-70.96569, 20.197525, 17.693771, 0.876) pt3dadd(-91.46744, 0.11594391, 19.414223, 0.876)}
    comp[19] {pt3dadd(-111.9701, -19.96542, 21.135023, 0.876)}
    comp[14] {pt3dclear() pt3dadd(75.76205, 50.719646, -2.9313235, 0.876) pt3dadd(100.68256, 58.75108, 8.945222, 0.876)}
    comp[14] {pt3dadd(125.60211, 66.782364, 20.82172, 0.876)}
    comp[13] {pt3dclear() pt3dadd(75.76205, 50.719646, -2.9313235, 0.876) pt3dadd(104.13309, 55.079487, -1.3069592, 0.876)}
    comp[13] {pt3dadd(132.50412, 59.439327, 0.3174057, 0.876)}
    comp[12] {pt3dclear() pt3dadd(75.76205, 50.719646, -2.9313235, 0.876) pt3dadd(103.10539, 50.719734, -11.815488, 0.876)}
    comp[12] {pt3dadd(130.4478, 50.719654, -20.699776, 0.876)}
    comp[11] {pt3dclear() pt3dadd(73.70571, 41.999973, -23.948502, 0.876) pt3dadd(102.07675, 46.359814, -22.32414, 0.876)}
    comp[11] {pt3dadd(130.4478, 50.719654, -20.699776, 0.876)}
    comp[10] {pt3dclear() pt3dadd(73.70571, 41.999973, -23.948502, 0.876) pt3dadd(101.04909, 42.00004, -32.832737, 0.876)}
    comp[10] {pt3dadd(128.39146, 41.999954, -41.717026, 0.876)}
    comp[9] {pt3dclear() pt3dadd(73.70571, 41.999973, -23.948502, 0.876) pt3dadd(95.704254, 37.64023, -41.93869, 0.876)}
    comp[9] {pt3dadd(117.70182, 33.280334, -59.92894, 0.876)}
    comp[8] {pt3dclear() pt3dadd(63.016083, 33.280357, -42.160416, 0.876) pt3dadd(90.35845, 33.28027, -51.04471, 0.876)}
    comp[8] {pt3dadd(117.70182, 33.280334, -59.92894, 0.876)}
    comp[7] {pt3dclear() pt3dadd(63.016083, 33.280357, -42.160416, 0.876) pt3dadd(85.01363, 28.92046, -60.150665, 0.876)}
    comp[7] {pt3dadd(107.01119, 24.560566, -78.14091, 0.876)}
    comp[6] {pt3dclear() pt3dadd(63.016083, 33.280357, -42.160416, 0.876) pt3dadd(76.19619, 25.249002, -66.416405, 0.876)}
    comp[6] {pt3dadd(89.37534, 17.217388, -90.67273, 0.876)}
    comp[137] {pt3dclear() pt3dadd(-19.470892, -146.053, 0.0, 1.0) pt3dadd(-29.206392, -169.08, 0.0, 1.0)}
    comp[137] {pt3dadd(-38.94189, -192.106, 0.0, 1.0)}
    comp[135] {pt3dclear() pt3dadd(19.470907, -146.053, 0.0, 1.0) pt3dadd(29.206408, -169.08, 0.0, 1.0)}
    comp[135] {pt3dadd(38.941807, -192.106, 0.0, 1.0)}


 }
         proc biophys() {
 // 
 //       insert the mechanisms and assign max conductances
 // 
 forsec all { insert pas
insert extracellular
	xraxial=1e+09 
	xg=1e+09 
	xc=0 
	e_extracellular  }   // g_pas has two values; soma-dend,axon
 forsec level[ 0] {
       insert naf_tcr
       gbar_naf_tcr =   0.4
//	shift_hnaf_naf_tcr = JfgNaS
       insert napf_tcr
       gbar_napf_tcr =   0.0008
       insert kdr
       gbar_kdr =   0.18
       insert ka
       gbar_ka =   0.001
       insert k2
       gbar_k2 =   0.0005
 }
 forsec level[ 1] {
       insert naf_tcr
       gbar_naf_tcr =   0.1
       insert napf_tcr
       gbar_napf_tcr =   0.0002
       insert kdr
       gbar_kdr =   0.03375
       insert kc
       gbar_kc =   0.012
       insert ka
       gbar_ka =   0.006
       insert km
       gbar_km =   0.0005
       insert k2
       gbar_k2 =   0.002
       insert kahp_slower
       gbar_kahp_slower =   0.00005
       insert cal
       gbar_cal =   0.0005
       insert cat
       gbar_cat =   0.0005
       insert ar
       gbar_ar =   0.00025
       insert cad
       // *** ca diffusion: beta=1/tau
       beta_cad  =   0.02
       // cafor(I) (FORTRAN) converted to phi (NEURON)
       phi_cad =   52000.
 }
 forsec level[ 2] {
       insert naf_tcr
       gbar_naf_tcr =   0.1
       insert napf_tcr
       gbar_napf_tcr =   0.0002
       insert kdr
       gbar_kdr =   0.0225
       insert kc
       gbar_kc =   0.012
       insert ka
       gbar_ka =   0.006
       insert km
       gbar_km =   0.0005
       insert k2
       gbar_k2 =   0.002
       insert kahp_slower
       gbar_kahp_slower =   0.00005
       insert cal
       gbar_cal =   0.0005
       insert cat
       gbar_cat =   0.005
       insert ar
       gbar_ar =   0.0005
       insert cad
       // *** ca diffusion: beta=1/tau
       beta_cad  =   0.05
       // cafor(I) (FORTRAN) converted to phi (NEURON)
       phi_cad =   104000.
 }
 forsec level[ 3] {
       insert naf_tcr
       gbar_naf_tcr =   0.005
       insert napf_tcr
       gbar_napf_tcr =   0.00001
       insert kc
       gbar_kc =   0.02
       insert ka
       gbar_ka =   0.0002
       insert km
       gbar_km =   0.0005
       insert k2
       gbar_k2 =   0.002
       insert kahp_slower
       gbar_kahp_slower =   0.00005
       insert cal
       gbar_cal =   0.00025
       insert cat
       gbar_cat =   0.003
       insert ar
       gbar_ar =   0.0003
       insert cad
       // *** ca diffusion: beta=1/tau
       beta_cad  =   0.05
       // cafor(I) (FORTRAN) converted to phi (NEURON)
       phi_cad =   104000.
 }
 forsec level[ 4] {
       insert naf_tcr
       gbar_naf_tcr =   0.005
       insert napf_tcr
       gbar_napf_tcr =   0.00001
       insert kc
       gbar_kc =   0.02
       insert ka
       gbar_ka =   0.0002
       insert km
       gbar_km =   0.0005
       insert k2
       gbar_k2 =   0.002
       insert kahp_slower
       gbar_kahp_slower =   0.00005
       insert cal
       gbar_cal =   0.00025
       insert cat
       gbar_cat =   0.0005
       insert ar
       gbar_ar =   0.0003
       insert cad
       // *** ca diffusion: beta=1/tau
       beta_cad  =   0.05
       // cafor(I) (FORTRAN) converted to phi (NEURON)
       phi_cad =   104000.
 }
 forsec all {
    cm =   0.9  // assign global specific capac.
 }
 // 
 //  passive membrane resistance (leak) and axial resistance
 // 
 forsec Soma_Dendrites {
    g_pas =   3.78787879E-05
    Ra =   175.
 }
 forsec Axon {
    g_pas =   0.001
    Ra =   100.
 }
 ceiling_cad = 1e6 //  nearly unlimited Ca concentration
 // print "made it to end of initialization from SCORTMAJ_FRB()"
 }  // end of biophys
 
 // Compartment Area: Dendritic.spines double area of
 // dend. membrane, which in Traubs method is equivalent to
 // only multiplying all dend. max conductances by two
 // (the area is doubled but the volume is const.)
 proc double_dend_cond() {
   spine_area_multiplier = 2
   forsec Dendrites {
        if (ismembrane("napf_tcr")) { gbar_napf_tcr *= spine_area_multiplier }
        if (ismembrane("napf_tcrf")) { gbar_napf_tcrf *= spine_area_multiplier }
        if (ismembrane("napf_tcrf_tcr")) { gbar_napf_tcrf_tcr *= spine_area_multiplier }
        if (ismembrane("naf_tcr")) { gbar_naf_tcr *= spine_area_multiplier }
        if (ismembrane("naf_tcr_tcr")) { gbar_naf_tcr_tcr *= spine_area_multiplier }
        if (ismembrane("naf_tcr2")) { gbar_naf_tcr2 *= spine_area_multiplier }
        if (ismembrane("kc")) { gbar_kc *= spine_area_multiplier }
        if (ismembrane("kc_fast")) { gbar_kc_fast *= spine_area_multiplier }
        if (ismembrane("kahp")) { gbar_kahp *= spine_area_multiplier }
        if (ismembrane("kahp_slower")) { gbar_kahp_slower *= spine_area_multiplier }
        if (ismembrane("km")) { gbar_km *= spine_area_multiplier }
        if (ismembrane("kdr")) { gbar_kdr *= spine_area_multiplier }
        if (ismembrane("kdr_fs")) { gbar_kdr_fs *= spine_area_multiplier }
        if (ismembrane("ka")) { gbar_ka *= spine_area_multiplier }
        if (ismembrane("ka_ib")) { gbar_ka_ib *= spine_area_multiplier }
        if (ismembrane("k2")) { gbar_k2 *= spine_area_multiplier }
        if (ismembrane("cal")) { gbar_cal *= spine_area_multiplier }
        if (ismembrane("cat")) { gbar_cat *= spine_area_multiplier }
        if (ismembrane("cat_a")) { gbar_cat_a *= spine_area_multiplier }
        if (ismembrane("ar")) { gbar_ar *= spine_area_multiplier }
        if (ismembrane("pas")) { g_pas *= spine_area_multiplier }
        cm = cm * spine_area_multiplier
   }
 }
 // double_dend_cond()  // run for cells w/ spines
 
        proc position() { local i
 // comp switched to comp[1] since 0 deleted
         forsec all { for i = 0, n3d()-1 {
     pt3dchange(i, $1-x+x3d(i), \
      $2-y+y3d(i), $3-z+z3d(i),diam3d(i))
        }
		}
         x=$1 y=$2 z=$3
        }
         proc connect2target() { 
  // $o1 targ point process, $o2 returned NetCon
           comp[presyn_comp] $o2 = new NetCon(&v(1),$o1)
	$o2.threshold = 0
         }
         objref syn_
         proc synapses() {
         // place for each compartment that has input
         // statements like 
 //comp[3] syn_=new AlphaSynKinT(1) synlist.append(syn_)
 //comp[4] syn_=new NMDA(1) synlist.append(syn_)
         }
 
 // is not an artificial cell:
      func is_art() { return 0 }
 
 
 
         proc more_adjustments() {
 forsec all {
    // global reversal potentials
    ek =  -95.
    e_pas =  -70.
    ena =   50.
    vca =   125.
    forsec all if (ismembrane("ar")) erev_ar =  -35.
    e_gaba_a =  -81.
 }
 //extended initializations
//   for i=1,137 {
//     comp[i] if (ismembrane("ka")) {gbar_ka*=0.2}
//   }
//   for i = 132, 137 { // axon
//     comp[i] gbar_kdr *= 0.45
//   }
//   comp[1]  gbar_kdr *= 0.45
//   for (i = 2; i<=119; i += 13) {  // level 2
//     comp[i] gbar_kdr *= 0.45
//   }
 
    persistentNa_shift = 7
 // in the fortran code the napf_tcrf has a 10 mV shift
 // but uses the naf_tcr rates (apham_...) which were
 // created with a -3 mV shift for total 7 mV 
    forsec all { if (ismembrane("napf_tcr")){
                 fastNa_shift_napf_tcr = 0.0}
    }
 }
          proc set_doubler() {doubler=0}
          // this function sets doubler to 0 
          // because there are no spines
          // in the cell, replacing earlier fnc.
  endtemplate TCR
